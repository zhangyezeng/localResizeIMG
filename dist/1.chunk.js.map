{"version":3,"sources":["webpack:///1.chunk.js","webpack:///src/lib/megapix-image.js"],"names":["webpackJsonp","7","module","exports","__webpack_require__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","canvas","document","createElement","width","height","ctx","getContext","drawImage","getImageData","data","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","options","doSquash","renderImageToCanvas","toDataURL","quality","save","transformCoordinate","orientation","subsampled","d","tmpCanvas","tmpCtx","vertSquashRatio","dw","Math","ceil","dh","dy","sx","dx","clearRect","restore","translate","scale","rotate","PI","MegaPixImage","srcImage","window","Blob","Image","URL","createObjectURL","webkitURL","Error","src","this","blob","_this","onload","listeners","imageLoadListeners","i","len","length","prototype","render","target","callback","push","srcLength","imgWidth","imgHeight","maxWidth","maxHeight","type","indexOf","opt","k","tagName","toLowerCase","onrender","apply","undefined"],"mappings":"AAAAA,cAAc,IAERC,EACA,SAAUC,EAAQC,EAASC,GCHjC,GAAAC,GAAAC,GAUA,WAMA,QAAAC,GAAAC,GACA,GAAAC,GAAAD,EAAAE,aAAAC,EAAAH,EAAAI,aACA,IAAAH,EAAAE,EAAA,SACA,GAAAE,GAAAC,SAAAC,cAAA,SACAF,GAAAG,MAAAH,EAAAI,OAAA,CACA,IAAAC,GAAAL,EAAAM,WAAA,KAKA,OAJAD,GAAAE,UAAAZ,GAAAC,EAAA,KAIA,IAAAS,EAAAG,aAAA,SAAAC,KAAA,GAEA,SAQA,QAAAC,GAAAf,EAAAC,EAAAE,GACA,GAAAE,GAAAC,SAAAC,cAAA,SACAF,GAAAG,MAAA,EACAH,EAAAI,OAAAN,CACA,IAAAO,GAAAL,EAAAM,WAAA,KACAD,GAAAE,UAAAZ,EAAA,IAMA,KALA,GAAAc,GAAAJ,EAAAG,aAAA,MAAAV,GAAAW,KAEAE,EAAA,EACAC,EAAAd,EACAe,EAAAf,EACAe,EAAAF,GAAA,CACA,GAAAG,GAAAL,EAAA,GAAAI,EAAA,KACA,KAAAC,EACAF,EAAAC,EAEAF,EAAAE,EAEAA,EAAAD,EAAAD,GAAA,EAEA,GAAAI,GAAAF,EAAAf,CACA,YAAAiB,EAAA,EAAAA,EAMA,QAAAC,GAAArB,EAAAsB,EAAAC,GACA,GAAAlB,GAAAC,SAAAC,cAAA,SAEA,OADAiB,GAAAxB,EAAAK,EAAAiB,EAAAC,GACAlB,EAAAoB,UAAA,aAAAH,EAAAI,SAAA,IAMA,QAAAF,GAAAxB,EAAAK,EAAAiB,EAAAC,GACA,GAAAtB,GAAAD,EAAAE,aAAAC,EAAAH,EAAAI,cACAI,EAAAc,EAAAd,MAAAC,EAAAa,EAAAb,OACAC,EAAAL,EAAAM,WAAA,KACAD,GAAAiB,OACAC,EAAAvB,EAAAK,EAAAF,EAAAC,EAAAa,EAAAO,YACA,IAAAC,GAAA/B,EAAAC,EACA8B,KACA7B,GAAA,EACAE,GAAA,EAEA,IAAA4B,GAAA,KACAC,EAAA1B,SAAAC,cAAA,SACAyB,GAAAxB,MAAAwB,EAAAvB,OAAAsB,CAOA,KANA,GAAAE,GAAAD,EAAArB,WAAA,MACAuB,EAAAX,EAAAR,EAAAf,EAAAC,EAAAE,GAAA,EACAgC,EAAAC,KAAAC,KAAAN,EAAAvB,EAAAP,GACAqC,EAAAF,KAAAC,KAAAN,EAAAtB,EAAAN,EAAA+B,GACAlB,EAAA,EACAuB,EAAA,EACAvB,EAAAb,GAAA,CAGA,IAFA,GAAAqC,GAAA,EACAC,EAAA,EACAD,EAAAvC,GACAgC,EAAAS,UAAA,IAAAX,KACAE,EAAArB,UAAAZ,GAAAwC,GAAAxB,GACAN,EAAAE,UAAAoB,EAAA,IAAAD,IAAAU,EAAAF,EAAAJ,EAAAG,GACAE,GAAAT,EACAU,GAAAN,CAEAnB,IAAAe,EACAQ,GAAAD,EAEA5B,EAAAiC,UACAX,EAAAC,EAAA,KAOA,QAAAL,GAAAvB,EAAAK,EAAAF,EAAAC,EAAAoB,GACA,OAAAA,GACA,OACA,OACA,OACA,OACAxB,EAAAG,MAAAC,EACAJ,EAAAI,OAAAD,CACA,MACA,SACAH,EAAAG,QACAH,EAAAI,SAEA,OAAAoB,GACA,OAEAnB,EAAAkC,UAAApC,EAAA,GACAE,EAAAmC,OAAA,IACA,MACA,QAEAnC,EAAAkC,UAAApC,EAAAC,GACAC,EAAAoC,OAAAV,KAAAW,GACA,MACA,QAEArC,EAAAkC,UAAA,EAAAnC,GACAC,EAAAmC,MAAA,KACA,MACA,QAEAnC,EAAAoC,OAAA,GAAAV,KAAAW,IACArC,EAAAmC,MAAA,KACA,MACA,QAEAnC,EAAAoC,OAAA,GAAAV,KAAAW,IACArC,EAAAkC,UAAA,GAAAnC,EACA,MACA,QAEAC,EAAAoC,OAAA,GAAAV,KAAAW,IACArC,EAAAkC,UAAApC,GAAAC,GACAC,EAAAmC,OAAA,IACA,MACA,QAEAnC,EAAAoC,QAAA,GAAAV,KAAAW,IACArC,EAAAkC,WAAApC,EAAA,IAWA,QAAAwC,GAAAC,GACA,GAAAC,OAAAC,MAAAF,YAAAE,MAAA,CACA,GAAAnD,GAAA,GAAAoD,OACAC,EAAAH,OAAAG,KAAAH,OAAAG,IAAAC,gBAAAJ,OAAAG,IACAH,OAAAK,WAAAL,OAAAK,UAAAD,gBAAAJ,OAAAK,UACA,IACA,KAAAF,EACA,KAAAG,OAAA,uDAEAxD,GAAAyD,IAAAJ,EAAAC,gBAAAL,GACAS,KAAAC,KAAAV,EACAA,EAAAjD,EAEA,IAAAiD,EAAA/C,eAAA+C,EAAA7C,cAAA,CACA,GAAAwD,GAAAF,IACAT,GAAAY,OAAA,WACA,GAAAC,GAAAF,EAAAG,kBACA,IAAAD,EAAA,CACAF,EAAAG,mBAAA,IACA,QAAAC,GAAA,EAAAC,EAAAH,EAAAI,OAA2DF,EAAAC,EAASD,IACpEF,EAAAE,OAIAN,KAAAK,sBAEAL,KAAAT,WAMAD,EAAAmB,UAAAC,OAAA,SAAAC,EAAA/C,EAAAgD,GACA,GAAAZ,KAAAK,mBAAA,CACA,GAAAH,GAAAF,IAIA,YAHAA,MAAAK,mBAAAQ,KAAA,WACAX,EAAAQ,OAAAC,EAAA/C,EAAAgD,KAIAhD,OACA,IAAA2B,GAAAS,KAAAT,SACAQ,EAAAR,EAAAQ,IACAe,EAAAf,EAAAS,OACAO,EAAAxB,EAAA/C,aAAAwE,EAAAzB,EAAA7C,cACAI,EAAAc,EAAAd,MAAAC,EAAAa,EAAAb,OACAkE,EAAArD,EAAAqD,SAAAC,EAAAtD,EAAAsD,UACArD,EAAAmC,KAAAC,MAAA,eAAAD,KAAAC,KAAAkB,MACA,IAAApB,EAAAqB,QAAA,oBACArB,EAAAqB,QAAA,UAAAN,EAAA,GACAf,EAAAqB,QAAA,WAAAN,EAAA,CACAhE,KAAAC,EACAA,EAAAiE,EAAAlE,EAAAiE,GAAA,EACShE,IAAAD,EACTA,EAAAiE,EAAAhE,EAAAiE,GAAA,GAEAlE,EAAAiE,EACAhE,EAAAiE,GAEAC,GAAAnE,EAAAmE,IACAnE,EAAAmE,EACAlE,EAAAiE,EAAAlE,EAAAiE,GAAA,GAEAG,GAAAnE,EAAAmE,IACAnE,EAAAmE,EACApE,EAAAiE,EAAAhE,EAAAiE,GAAA,EAEA,IAAAK,IAAmBvE,QAAAC,SACnB,QAAAuE,KAAA1D,GAAAyD,EAAAC,GAAA1D,EAAA0D,EAEA,IAAAC,GAAAZ,EAAAY,QAAAC,aACA,SAAAD,EACAZ,EAAAZ,IAAApC,EAAAqC,KAAAT,SAAA8B,EAAAxD,GACS,WAAA0D,GACTzD,EAAAkC,KAAAT,SAAAoB,EAAAU,EAAAxD,GAEA,kBAAAmC,MAAAyB,UACAzB,KAAAyB,SAAAd,GAEAC,GACAA,KAQAzE,KAAAC,EAAA,WACA,MAAAkD,IACSoC,MAAAzF,EAAAE,KAAAwF,SAAAvF,IAAAJ,EAAAC,QAAAG","file":"1.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n\t * Mega pixel image rendering library for iOS6 Safari\r\n\t *\r\n\t * Fixes iOS6 Safari's image file rendering issue for large size image (over mega-pixel),\r\n\t * which causes unexpected subsampling when drawing it in canvas.\r\n\t * By using this library, you can safely render the image with proper stretching.\r\n\t *\r\n\t * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\r\n\t * Released under the MIT license\r\n\t */\r\n\t(function () {\r\n\t\r\n\t    /**\r\n\t     * Detect subsampling in loaded image.\r\n\t     * In iOS, larger images than 2M pixels may be subsampled in rendering.\r\n\t     */\r\n\t    function detectSubsampling (img) {\r\n\t        var iw = img.naturalWidth, ih = img.naturalHeight;\r\n\t        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\r\n\t            var canvas   = document.createElement('canvas');\r\n\t            canvas.width = canvas.height = 1;\r\n\t            var ctx = canvas.getContext('2d');\r\n\t            ctx.drawImage(img, -iw + 1, 0);\r\n\t            // subsampled image becomes half smaller in rendering size.\r\n\t            // check alpha channel value to confirm image is covering edge pixel or not.\r\n\t            // if alpha value is 0 image is not covering, hence subsampled.\r\n\t            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\r\n\t        } else {\r\n\t            return false;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Detecting vertical squash in loaded image.\r\n\t     * Fixes a bug which squash image vertically while drawing into canvas for some images.\r\n\t     */\r\n\t    function detectVerticalSquash (img, iw, ih) {\r\n\t        var canvas    = document.createElement('canvas');\r\n\t        canvas.width  = 1;\r\n\t        canvas.height = ih;\r\n\t        var ctx       = canvas.getContext('2d');\r\n\t        ctx.drawImage(img, 0, 0);\r\n\t        var data      = ctx.getImageData(0, 0, 1, ih).data;\r\n\t        // search image edge pixel position in case it is squashed vertically.\r\n\t        var sy = 0;\r\n\t        var ey = ih;\r\n\t        var py = ih;\r\n\t        while (py > sy) {\r\n\t            var alpha = data[(py - 1) * 4 + 3];\r\n\t            if (alpha === 0) {\r\n\t                ey = py;\r\n\t            } else {\r\n\t                sy = py;\r\n\t            }\r\n\t            py = (ey + sy) >> 1;\r\n\t        }\r\n\t        var ratio = (py / ih);\r\n\t        return (ratio === 0) ? 1 : ratio;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Rendering image element (with resizing) and get its data URL\r\n\t     */\r\n\t    function renderImageToDataURL (img, options, doSquash) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        renderImageToCanvas(img, canvas, options, doSquash);\r\n\t        return canvas.toDataURL(\"image/jpeg\", options.quality || 0.8);\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Rendering image element (with resizing) into the canvas element\r\n\t     */\r\n\t    function renderImageToCanvas (img, canvas, options, doSquash) {\r\n\t        var iw         = img.naturalWidth, ih = img.naturalHeight;\r\n\t        var width      = options.width, height = options.height;\r\n\t        var ctx        = canvas.getContext('2d');\r\n\t        ctx.save();\r\n\t        transformCoordinate(canvas, ctx, width, height, options.orientation);\r\n\t        var subsampled = detectSubsampling(img);\r\n\t        if (subsampled) {\r\n\t            iw /= 2;\r\n\t            ih /= 2;\r\n\t        }\r\n\t        var d = 1024; // size of tiling canvas\r\n\t        var tmpCanvas   = document.createElement('canvas');\r\n\t        tmpCanvas.width = tmpCanvas.height = d;\r\n\t        var tmpCtx          = tmpCanvas.getContext('2d');\r\n\t        var vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1;\r\n\t        var dw              = Math.ceil(d * width / iw);\r\n\t        var dh              = Math.ceil(d * height / ih / vertSquashRatio);\r\n\t        var sy              = 0;\r\n\t        var dy              = 0;\r\n\t        while (sy < ih) {\r\n\t            var sx = 0;\r\n\t            var dx = 0;\r\n\t            while (sx < iw) {\r\n\t                tmpCtx.clearRect(0, 0, d, d);\r\n\t                tmpCtx.drawImage(img, -sx, -sy);\r\n\t                ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\r\n\t                sx += d;\r\n\t                dx += dw;\r\n\t            }\r\n\t            sy += d;\r\n\t            dy += dh;\r\n\t        }\r\n\t        ctx.restore();\r\n\t        tmpCanvas           = tmpCtx = null;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Transform canvas coordination according to specified frame size and orientation\r\n\t     * Orientation value is from EXIF tag\r\n\t     */\r\n\t    function transformCoordinate (canvas, ctx, width, height, orientation) {\r\n\t        switch (orientation) {\r\n\t            case 5:\r\n\t            case 6:\r\n\t            case 7:\r\n\t            case 8:\r\n\t                canvas.width  = height;\r\n\t                canvas.height = width;\r\n\t                break;\r\n\t            default:\r\n\t                canvas.width  = width;\r\n\t                canvas.height = height;\r\n\t        }\r\n\t        switch (orientation) {\r\n\t            case 2:\r\n\t                // horizontal flip\r\n\t                ctx.translate(width, 0);\r\n\t                ctx.scale(-1, 1);\r\n\t                break;\r\n\t            case 3:\r\n\t                // 180 rotate left\r\n\t                ctx.translate(width, height);\r\n\t                ctx.rotate(Math.PI);\r\n\t                break;\r\n\t            case 4:\r\n\t                // vertical flip\r\n\t                ctx.translate(0, height);\r\n\t                ctx.scale(1, -1);\r\n\t                break;\r\n\t            case 5:\r\n\t                // vertical flip + 90 rotate right\r\n\t                ctx.rotate(0.5 * Math.PI);\r\n\t                ctx.scale(1, -1);\r\n\t                break;\r\n\t            case 6:\r\n\t                // 90 rotate right\r\n\t                ctx.rotate(0.5 * Math.PI);\r\n\t                ctx.translate(0, -height);\r\n\t                break;\r\n\t            case 7:\r\n\t                // horizontal flip + 90 rotate right\r\n\t                ctx.rotate(0.5 * Math.PI);\r\n\t                ctx.translate(width, -height);\r\n\t                ctx.scale(-1, 1);\r\n\t                break;\r\n\t            case 8:\r\n\t                // 90 rotate left\r\n\t                ctx.rotate(-0.5 * Math.PI);\r\n\t                ctx.translate(-width, 0);\r\n\t                break;\r\n\t            default:\r\n\t                break;\r\n\t        }\r\n\t    }\r\n\t\r\n\t\r\n\t    /**\r\n\t     * MegaPixImage class\r\n\t     */\r\n\t    function MegaPixImage (srcImage) {\r\n\t        if (window.Blob && srcImage instanceof Blob) {\r\n\t            var img = new Image();\r\n\t            var URL = window.URL && window.URL.createObjectURL ? window.URL :\r\n\t                window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\r\n\t                    null;\r\n\t            if (!URL) {\r\n\t                throw Error(\"No createObjectURL function found to create blob url\");\r\n\t            }\r\n\t            img.src   = URL.createObjectURL(srcImage);\r\n\t            this.blob = srcImage;\r\n\t            srcImage  = img;\r\n\t        }\r\n\t        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\r\n\t            var _this               = this;\r\n\t            srcImage.onload         = function () {\r\n\t                var listeners = _this.imageLoadListeners;\r\n\t                if (listeners) {\r\n\t                    _this.imageLoadListeners = null;\r\n\t                    for (var i = 0, len = listeners.length; i < len; i++) {\r\n\t                        listeners[i]();\r\n\t                    }\r\n\t                }\r\n\t            };\r\n\t            this.imageLoadListeners = [];\r\n\t        }\r\n\t        this.srcImage = srcImage;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Rendering megapix image into specified target element\r\n\t     */\r\n\t    MegaPixImage.prototype.render = function (target, options, callback) {\r\n\t        if (this.imageLoadListeners) {\r\n\t            var _this = this;\r\n\t            this.imageLoadListeners.push(function () {\r\n\t                _this.render(target, options, callback);\r\n\t            });\r\n\t            return;\r\n\t        }\r\n\t        options       = options || {};\r\n\t        var srcImage  = this.srcImage,\r\n\t            src       = srcImage.src,\r\n\t            srcLength = src.length,\r\n\t            imgWidth  = srcImage.naturalWidth, imgHeight = srcImage.naturalHeight,\r\n\t            width     = options.width, height = options.height,\r\n\t            maxWidth  = options.maxWidth, maxHeight = options.maxHeight,\r\n\t            doSquash  = this.blob && this.blob.type === 'image/jpeg' ||\r\n\t                src.indexOf('data:image/jpeg') === 0 ||\r\n\t                src.indexOf('.jpg') === srcLength - 4 ||\r\n\t                src.indexOf('.jpeg') === srcLength - 5;\r\n\t        if (width && !height) {\r\n\t            height = (imgHeight * width / imgWidth) << 0;\r\n\t        } else if (height && !width) {\r\n\t            width = (imgWidth * height / imgHeight) << 0;\r\n\t        } else {\r\n\t            width  = imgWidth;\r\n\t            height = imgHeight;\r\n\t        }\r\n\t        if (maxWidth && width > maxWidth) {\r\n\t            width  = maxWidth;\r\n\t            height = (imgHeight * width / imgWidth) << 0;\r\n\t        }\r\n\t        if (maxHeight && height > maxHeight) {\r\n\t            height = maxHeight;\r\n\t            width  = (imgWidth * height / imgHeight) << 0;\r\n\t        }\r\n\t        var opt = {width: width, height: height};\r\n\t        for (var k in options) opt[k] = options[k];\r\n\t\r\n\t        var tagName = target.tagName.toLowerCase();\r\n\t        if (tagName === 'img') {\r\n\t            target.src = renderImageToDataURL(this.srcImage, opt, doSquash);\r\n\t        } else if (tagName === 'canvas') {\r\n\t            renderImageToCanvas(this.srcImage, target, opt, doSquash);\r\n\t        }\r\n\t        if (typeof this.onrender === 'function') {\r\n\t            this.onrender(target);\r\n\t        }\r\n\t        if (callback) {\r\n\t            callback();\r\n\t        }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Export class to global\r\n\t     */\r\n\t    if (true) {\r\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\r\n\t            return MegaPixImage;\r\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // for AMD loader\r\n\t    } else {\r\n\t        this.MegaPixImage = MegaPixImage;\r\n\t    }\r\n\t\r\n\t})();\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 1.chunk.js","null\n\n\n// WEBPACK FOOTER //\n// src/lib/megapix-image.js"],"sourceRoot":""}